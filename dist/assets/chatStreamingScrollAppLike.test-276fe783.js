import{r as m,S as b}from"./index-401504da.js";function a(){return new Promise(e=>requestAnimationFrame(()=>e()))}function f(){const e=document.createElement("div");return e.style.position="absolute",e.style.left="-99999px",e.style.top="-99999px",e.style.width="600px",e.style.height="500px",e.style.overflow="auto",e.style.background="transparent",document.body.appendChild(e),e}function y(e){const t=document.createElement("div");t.style.position="relative",t.style.width="100%",t.style.boxSizing="border-box",t.style.padding="0",t.style.margin="0";const o=document.createElement("div");return o.style.height=`${e}px`,o.style.boxSizing="border-box",t.appendChild(o),t}function g(e,t,o){const n=document.createElement("div");n.style.height=`${t}px`,n.style.boxSizing="border-box",n.style.border="0",n.style.margin="0",n.style.padding="0",o&&(n.textContent=o),e.appendChild(n)}async function c(e,t,o,n=1){for(let r=0;r<t;r++){g(e,o,`stream chunk ${r+1}`);for(let s=0;s<n;s++)await a()}}function x(e){const t=e.scrollHeight-e.clientHeight;return t<=0?0:e.scrollTop/t}m({id:"ui-scroll-streaming-app-like-second-response-drift",name:"Chat scroll (app-like): viewport should not drift across multiple streaming responses",tags:["ui","dom","non-api"],timeoutMs:1e4,fn:async e=>{const t=f(),o=new b;o.attach(t);const n=new MutationObserver(()=>{o.restoreCurrentAfterFrame()});n.observe(t,{childList:!0,subtree:!0,characterData:!0});try{const r=y(4e3);t.appendChild(r),o.setActiveKey("chat-1"),await a(),o.restoreCurrent(),await a();const s=t.scrollHeight-t.clientHeight;t.scrollTop=Math.floor(s*.4),await a(),o.saveCurrent();const d=t.scrollTop,p=x(t);e.that(Math.abs(p-.4)<.03,`Precondition ~40% (got ${(p*100).toFixed(1)}%).`),o.setSuspended(!0),await c(r,8,160,1),o.setSuspended(!1);const i=t.scrollTop;e.that(Math.abs(i-d)<=2,`Viewport stable during first stream (Δ=${Math.abs(i-d)}px).`),await c(r,10,150,1);const l=t.scrollTop,u=Math.abs(l-i);e.that(u<=2,`Viewport should remain stable during second stream (observed drift Δ=${u}px).`),o.setSuspended(!0),await c(r,6,180,1),o.setSuspended(!1);const h=t.scrollTop;e.that(Math.abs(h-l)<=2,`Viewport stable during third stream (Δ=${Math.abs(h-l)}px).`)}finally{o.detach(),n.disconnect(),document.body.removeChild(t)}}});
