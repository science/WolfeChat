import{r as c,C as l,a as m}from"./index-401504da.js";function r(t){return new Promise(e=>setTimeout(e,t))}c({id:"code-renderer-loses-highlighting-on-prop-update",name:"Code renderer loses Prism highlighting when text prop changes (streaming simulation)",tags:["ui","markdown","renderer","regression"],timeoutMs:5e3,fn:async t=>{const e=document.createElement("div");document.body.appendChild(e);const d="```js\nconst a = 1;\n```",o="```js\nconst a = 1;\nconst b = 2;\n```",n=new l({target:e,props:{text:d,lang:"js"}});await r(0);const i=e.querySelector("code");t.that(!!i,"Initial code element exists");const a=i.innerHTML.includes("token");t.that(a,"Initial Prism tokenization applied"),n.$set({text:o}),await r(0);const s=e.querySelector("code");t.that(!!s,"Code element still exists after update");const h=s.innerHTML.includes("token");t.that(h,"Highlighting persists after prop update"),n.$destroy(),document.body.removeChild(e)}});c({id:"svelte-markdown-toggles-code-renderer-under-streaming",name:"svelte-markdown + custom code renderer toggles between styled/unstyled during streaming",tags:["ui","markdown","renderer","integration","regression"],timeoutMs:7e3,fn:async t=>{const e=document.createElement("div");document.body.appendChild(e);const d="Here is code:\n\n```js\nconst a = 1;\n```\n",o=new m({target:e,props:{renderers:{code:l},source:d}});await r(0);let n=e.querySelector("pre code");t.that(!!n,"Code block exists after initial chunk");const i=n.innerHTML.includes("token");t.that(i,"Initial render is syntax highlighted");const a=`Here is code:

\`\`\`js
const a = 1;
const b = 2;
\`\`\`

And more text below the code block.`;o.$set({source:a}),await r(0),n=e.querySelector("pre code"),t.that(!!n,"Code block still exists after update");const s=n.innerHTML.includes("token");t.that(s,"After update, code block remains syntax highlighted"),o.$destroy(),document.body.removeChild(e)}});
