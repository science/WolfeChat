import{r as y,g as r,m as f,n as m,b as w,d as s,f as i}from"./index-58265e4e.js";function g(t){return new Promise(l=>setTimeout(l,t))}async function p(t){const l=window.fetch?.bind(window);let n=null;function d(e){try{const o=typeof e=="string"?e:e.url??String(e);return/\/v1\/(responses|chat\/completions)/.test(o)}catch{return!0}}window.fetch=async(e,o)=>{if(d(e))try{let a=typeof e=="string"?e:e.url??String(e);const h=o?.headers??{},c=o?.body&&typeof o.body=="string"?o.body:"",u=c?JSON.parse(c):null;n={url:a,headers:h,payload:u}}catch{}return Promise.reject(new Error("Intercepted fetch (non-API test): prevented network call"))};try{await Promise.resolve(t())}catch{}return await g(0),window.fetch=l,n}y({id:"ui-model-selection-payload-capture",name:"Model selection drives request payload.model",tags:["ui","non-api"],timeoutMs:15e3,fn:async t=>{const l=r(f);if(!l||l.length===0)throw new Error("Model cache is empty. Please load models first (e.g., via Settings -> Reload or run an API test) before running non-API tests.");await Promise.resolve(m()),await g(0);const n=r(w),d=r(s);s.set("gpt-4.1");const e=await p(()=>i("Test with gpt-4.1",n));if(t.that(!!e,"Captured a request payload for gpt-4.1 selection"),e&&e.payload){const a=e.payload?.model;t.that(typeof a=="string",`Payload has a model field (found: ${String(a)})`),t.that(a==="gpt-4.1",`Selected model 'gpt-4.1' is used in payload.model (actual: ${String(a)})`)}else t.that(!1,"No payload captured for gpt-4.1 (the send flow may have changed)");s.set("gpt-5");const o=await p(()=>i("Test with gpt-5",n));if(t.that(!!o,"Captured a request payload for gpt-5 selection"),o&&o.payload){const a=o.payload?.model;t.that(typeof a=="string",`Payload has a model field (found: ${String(a)})`),t.that(a==="gpt-5",`Selected model 'gpt-5' is used in payload.model (actual: ${String(a)})`)}else t.that(!1,"No payload captured for gpt-5 (the send flow may have changed)");s.set(d)}});
