import{r as M,g as n,c as f,b as x,l as y,o,q as j,u as B,w as N,x as D,h as J,v as Y,i as z,p as G,y as L}from"./index-58265e4e.js";function i(e){return new Promise(s=>setTimeout(s,e))}async function h(e,s=4e3,u=25){const p=performance.now();for(;!e();){if(performance.now()-p>s)throw new Error("waitFor: timeout");await i(u)}}function I(){const e=document.querySelector(".main-content-area");return e?e.querySelector(".overflow-y-auto"):null}function k(){const e=I();return e?Array.from(e.querySelectorAll(".message")):[]}function T(e){return Array.from(e.querySelectorAll("details"))}function E(e){return Array.from(e.querySelectorAll("div.rounded.border.border-gray-500"))}function A(e){return(e.querySelector("pre")?.textContent||"").trim()}function H(e){return(e.querySelector(".text-xs")?.textContent||"").trim().toLowerCase()}function V(e){const s=new TextEncoder;return new ReadableStream({start(u){for(const p of e){const C=`event: ${p.event}
data: ${JSON.stringify(p.data)}

`;u.enqueue(s.encode(C))}u.close()}})}function U(e){const s=V(e);return new Response(s,{headers:{"Content-Type":"text/event-stream"}})}function W(e){if(!e)return!1;const s=Math.floor(e.length/2);if(e.length%2!==0)return!1;const u=e.slice(0,s),p=e.slice(s);return u===p}M({id:"reasoning-live-sse-panel-dedupe",name:"Reasoning SSE: single panel streams once and finalizes without duplication",tags:["live","reasoning","ui"],timeoutMs:15e3,fn:async e=>{const s=n(f),u=n(x),p=n(y),C=n(o);try{f.set([{id:"test-conv-1",title:"Reasoning Test Conversation",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"User question here"},{role:"assistant",content:"Assistant prior reply"}]}]),x.set(0),y.set([]),o.set([]),await i(0),await h(()=>!!I(),4e3),await i(50);const w=k();e.that(w.length>=1,"At least one message element should render");const q=0,l=w[q];e.that(!!l,"User message element exists at anchor index");let c=T(l);e.that(c.length===0,"No reasoning window present before SSE");const P="test-conv-1",$=j(P,"gpt-5",q);await h(()=>T(l).length===1,3e3);let m=T(l);const d=m[0];e.that(!!d,"Reasoning collapsible window created on first reasoning SSE");const g=B("text",P,$);await h(()=>E(d).length===1,3e3);let R=E(d);e.that(R.length===1,"Exactly one reasoning panel is created for the stream");const a=["Alpha ","Beta ","Gamma"];let r="";for(const t of a){r+=t,N(g,t),await i(0),await h(()=>A(E(d)[0])===r.trim(),2e3);const v=A(E(d)[0]);e.that(v===r.trim(),`Panel text matches streamed content so far: "${r.trim()}"`),e.that(!v.includes(r.trim()+r.trim()),"Panel text is not duplicated")}D(g),await i(0),await h(()=>H(E(d)[0]).includes("done"),3e3);const _=E(d);e.that(_.length===1,"No additional panel created on finalize");const S=A(_[0]);e.that(S===r.trim(),"Final panel text matches exactly the streamed data"),e.that(!S.includes(r.trim()+r.trim()),"Final text is not duplicated"),m=T(l),e.that(m.length===1,"Exactly one reasoning window exists for the anchor")}finally{o.set(C),y.set(p),f.set(s),x.set(u),await i(0)}}});M({id:"reasoning-live-sse-realistic-duplication",name:"Reasoning SSE: realistic stream (gpt-5-nano) detects duplicate text and panels",tags:["live","reasoning","ui"],timeoutMs:2e4,fn:async e=>{const s=n(f),u=n(x),p=n(y),C=n(o),w=window.fetch?.bind(window);try{J.set("high"),Y.set("low"),z.set("auto"),f.set([{id:"test-conv-2",title:"Reasoning SSE Realistic",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"User question here"},{role:"assistant",content:"Assistant prior reply"}]}]),x.set(0),y.set([]),o.set([]),await i(0),await h(()=>!!I(),4e3),await i(50);const q=k();e.that(q.length>=1,"At least one message element should render");const l=q[0],c=["Alpha ","Beta "],P=["Gamma ","Delta "],$=c.join(""),m=P.join(""),d=[{event:"response.reasoning_text.delta",data:{delta:c[0]}},{event:"response.reasoning_text.delta",data:{delta:c[1]}},{event:"response.reasoning_text.done",data:{text:$}},{event:"response.reasoning_text.delta",data:{delta:P[0]}},{event:"response.reasoning_text.delta",data:{delta:P[1]}},{event:"response.reasoning_text.done",data:{text:m}},{event:"response.completed",data:{}}];window.fetch=(b,F)=>{const O=typeof b=="string"?b:b.url??String(b);return/\/v1\/responses$/.test(O)&&F?.method==="POST"?Promise.resolve(U(d)):w?w(b,F):Promise.reject(new Error("No fetch"))},await G("Explain the Monte Hall problem using logic. Think hard about the answer.","gpt-5-nano",void 0,void 0,{convId:"test-conv-2",anchorIndex:0}),await h(()=>T(l).length===1,4e3);const g=T(l)[0];await h(()=>E(g).length>=2,4e3),await h(()=>E(g).every(b=>H(b).includes("done")),4e3);const R=E(g),a=R.length;e.that(a===2,`Expected 2 panels, found ${a}`);const r=T(l);e.that(r.length===1,`Expected exactly one Reasoning window, found ${r.length}`);const _=A(R[0]),S=A(R[1]),t=$.trim(),v=m.trim();e.that(_===t,`Panel 1 final text should equal streamed content (${JSON.stringify(t)}), got ${JSON.stringify(_)}`),e.that(!W(_),"Panel 1 text is not an exact double of itself"),e.that(!_.includes(t+t),"Panel 1 text is not duplicated by concatenation"),e.that(S===v,`Panel 2 final text should equal streamed content (${JSON.stringify(v)}), got ${JSON.stringify(S)}`),e.that(!W(S),"Panel 2 text is not an exact double of itself"),e.that(!S.includes(v+v),"Panel 2 text is not duplicated by concatenation")}finally{o.set(C),y.set(p),f.set(s),x.set(u),await i(0),w&&(window.fetch=w)}}});M({id:"reasoning-live-no-duplicate-panels-per-sequence",name:"Reasoning SSE: ensures no duplicate panels are created for a single reasoning sequence",tags:["live","reasoning","ui"],timeoutMs:15e3,fn:async e=>{const s=n(f),u=n(x),p=n(y),C=n(o);try{f.set([{id:"test-conv-3",title:"No Duplicate Panels Test",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"Test question"}]}]),x.set(0),y.set([]),o.set([]),await i(0),await h(()=>!!I(),4e3);const q=k()[0],l=j("test-conv-3","gpt-5-nano",0),c=B("text","test-conv-3",l);N(c,"First chunk "),N(c,"Second chunk "),D(c),await i(100);const P=n(o).filter(a=>a.responseId===l);e.that(P.length===1,`Expected 1 panel after completion, got ${P.length}`);const $=n(o).length;D(c),await i(100);const m=n(o).length;e.that(m===$,`Panel count should not increase on duplicate completion (was ${$}, now ${m})`),await h(()=>T(q).length===1,2e3);const d=T(q)[0],g=E(d);e.that(g.length===1,`DOM should show 1 panel, but shows ${g.length}`);const R=A(g[0]);e.that(R==="First chunk Second chunk",`Panel text should be original, got: "${R}"`)}finally{o.set(C),y.set(p),f.set(s),x.set(u),await i(0)}}});M({id:"reasoning-live-monte-hall-no-duplicate-panels",name:"Reasoning SSE: Monte Hall problem generates correct number of panels without duplicates",tags:["live","reasoning","ui"],timeoutMs:2e4,fn:async e=>{const s=n(f),u=n(x),p=n(y),C=n(o),w=window.fetch?.bind(window);try{J.set("high"),Y.set("low"),z.set("auto"),f.set([{id:"test-conv-4",title:"Monte Hall Test",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"Explain the Monte Hall problem using logic. Think hard about the answer."}]}]),x.set(0),y.set([]),o.set([]),await i(0),await h(()=>!!I(),4e3);const l=k()[0];let c=0;const P=window.startReasoningPanel;window.__testPanelCreations=[];const $=(t,v,b)=>(c++,window.__testPanelCreations.push({kind:t,convId:v,responseId:b,timestamp:Date.now()}),P(t,v,b)),m=[{event:"response.reasoning_text.delta",data:{delta:"Reasoning 1 start "}},{event:"response.reasoning_text.delta",data:{delta:"Reasoning 1 middle "}},{event:"response.reasoning_text.done",data:{text:"Reasoning 1 start Reasoning 1 middle "}},{event:"response.reasoning_text.delta",data:{delta:"Reasoning 2 start "}},{event:"response.reasoning_text.delta",data:{delta:"Reasoning 2 end "}},{event:"response.reasoning_text.done",data:{text:"Reasoning 2 start Reasoning 2 end "}},{event:"response.reasoning_text.delta",data:{delta:"Reasoning 3 content "}},{event:"response.reasoning_text.done",data:{text:"Reasoning 3 content "}},{event:"response.completed",data:{}}];window.fetch=(t,v)=>{const b=typeof t=="string"?t:t.url??String(t);if(/\/v1\/responses$/.test(b)&&v?.method==="POST"){const F=window.startReasoningPanel;window.startReasoningPanel=$;const O=U(m);return setTimeout(()=>{window.startReasoningPanel=F},100),Promise.resolve(O)}return w?w(t,v):Promise.reject(new Error("No fetch"))},await G("Explain the Monte Hall problem using logic. Think hard about the answer.","gpt-5-nano",void 0,void 0,{convId:"test-conv-4",anchorIndex:0}),await h(()=>T(l).length===1,4e3);const d=T(l)[0];await h(()=>E(d).length>0,4e3),await h(()=>E(d).every(t=>H(t).includes("done")),5e3);const g=E(d),R=g.length;e.that(R===3,`Expected exactly 3 panels for 3 reasoning sequences, got ${R}`),e.that(c===3,`startReasoningPanel should be called 3 times, was called ${c} times`);const a=g.map(t=>A(t)),r=new Set(a);e.that(r.size===3,`All 3 panels should have unique text, but got ${r.size} unique texts`),e.that(a[0].includes("Reasoning 1"),`Panel 1 should contain "Reasoning 1", got: "${a[0]}"`),e.that(a[1].includes("Reasoning 2"),`Panel 2 should contain "Reasoning 2", got: "${a[1]}"`),e.that(a[2].includes("Reasoning 3"),`Panel 3 should contain "Reasoning 3", got: "${a[2]}"`);for(let t=0;t<a.length;t++)e.that(!W(a[t]),`Panel ${t+1} should not have duplicated text`);const S=n(o).filter(t=>t.convId==="test-conv-4");e.that(S.length===3,`Store should have exactly 3 panels for this conversation, has ${S.length}`)}finally{delete window.__testPanelCreations,o.set(C),y.set(p),f.set(s),x.set(u),await i(0),w&&(window.fetch=w)}}});M({id:"reasoning-live-panel-text-integrity",name:"Reasoning SSE: panel text matches streamed content without duplication",tags:["live","reasoning","ui"],timeoutMs:15e3,fn:async e=>{const s=n(f),u=n(x),p=n(y),C=n(o),w=window.appendReasoningText;try{f.set([{id:"test-conv-5",title:"Text Integrity Test",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"Test"}]}]),x.set(0),y.set([]),o.set([]),await i(0),await h(()=>!!I(),4e3);const l=k()[0],c=[];window.appendReasoningText=(t,v)=>(c.push({panelId:t,text:v}),w(t,v));const P=j("test-conv-5","gpt-5-nano",0),$=["Alpha","Beta","Gamma"],m=B("text","test-conv-5",P);for(const t of $)N(m,t),await i(50);L(m,$.join("")),D(m),await i(100),await h(()=>T(l).length===1,2e3);const d=T(l)[0],g=E(d);e.that(g.length===1,`Should have exactly 1 panel in DOM, got ${g.length}`);const R=A(g[0]),a="AlphaBetaGamma";e.that(R===a,`Final text should be "${a}", got "${R}"`);const r=c.filter(t=>t.panelId===m).map(t=>t.text).join("");e.that(r===a,`Appended text should total "${a}", got "${r}"`);const S=n(o).filter(t=>t.responseId===P);e.that(S.length===1,`Should have 1 panel in store for this window, got ${S.length}`)}finally{window.appendReasoningText=w,o.set(C),y.set(p),f.set(s),x.set(u),await i(0)}}});
