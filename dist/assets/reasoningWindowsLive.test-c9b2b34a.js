import{r as A,g as t,c as u,b as p,l as w,o,q as O,u as W,w as F,x as N,h as J,v as Y,i as j,p as G}from"./index-401504da.js";function l(e){return new Promise(a=>setTimeout(a,e))}async function c(e,a=4e3,d=25){const h=performance.now();for(;!e();){if(performance.now()-h>a)throw new Error("waitFor: timeout");await l(d)}}function M(){const e=document.querySelector(".main-content-area");return e?e.querySelector(".overflow-y-auto"):null}function _(){const e=M();return e?Array.from(e.querySelectorAll(".message")):[]}function R(e){return Array.from(e.querySelectorAll("details"))}function E(e){return Array.from(e.querySelectorAll("div.rounded.border.border-gray-500"))}function $(e){return(e.querySelector("pre")?.textContent||"").trim()}function B(e){return(e.querySelector(".text-xs")?.textContent||"").trim().toLowerCase()}function L(e){const a=new TextEncoder;return new ReadableStream({start(d){for(const h of e){const b=`event: ${h.event}
data: ${JSON.stringify(h.data)}

`;d.enqueue(a.encode(b))}d.close()}})}function U(e){const a=L(e);return new Response(a,{headers:{"Content-Type":"text/event-stream"}})}function D(e){if(!e)return!1;const a=Math.floor(e.length/2);if(e.length%2!==0)return!1;const d=e.slice(0,a),h=e.slice(a);return d===h}A({id:"reasoning-live-sse-panel-dedupe",name:"Reasoning SSE: single panel streams once and finalizes without duplication",tags:["live","reasoning","ui"],timeoutMs:15e3,fn:async e=>{const a=t(u),d=t(p),h=t(w),b=t(o);try{u.set([{id:"test-conv-1",title:"Reasoning Test Conversation",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"User question here"},{role:"assistant",content:"Assistant prior reply"}]}]),p.set(0),w.set([]),o.set([]),await l(0),await c(()=>!!M(),4e3),await l(50);const m=_();e.that(m.length>=1,"At least one message element should render");const T=0,r=m[T];e.that(!!r,"User message element exists at anchor index");let f=R(r);e.that(f.length===0,"No reasoning window present before SSE");const g="test-conv-1",S=O(g,"gpt-5",T);await c(()=>R(r).length===1,3e3);let v=R(r);const n=v[0];e.that(!!n,"Reasoning collapsible window created on first reasoning SSE");const x=W("text",g,S);await c(()=>E(n).length===1,3e3);let y=E(n);e.that(y.length===1,"Exactly one reasoning panel is created for the stream");const s=["Alpha ","Beta ","Gamma"];let i="";for(const I of s){i+=I,F(x,i),await l(0),await c(()=>$(E(n)[0])===i.trim(),2e3);const k=$(E(n)[0]);e.that(k===i.trim(),`Panel text matches streamed content so far: "${i.trim()}"`),e.that(!k.includes(i.trim()+i.trim()),"Panel text is not duplicated")}N(x),await l(0),await c(()=>B(E(n)[0]).includes("done"),3e3);const P=E(n);e.that(P.length===1,"No additional panel created on finalize");const C=$(P[0]);e.that(C===i.trim(),"Final panel text matches exactly the streamed data"),e.that(!C.includes(i.trim()+i.trim()),"Final text is not duplicated"),v=R(r),e.that(v.length===1,"Exactly one reasoning window exists for the anchor")}finally{o.set(b),w.set(h),u.set(a),p.set(d),await l(0)}}});A({id:"reasoning-live-sse-realistic-duplication",name:"Reasoning SSE: realistic stream (gpt-5-nano) detects duplicate text and panels",tags:["live","reasoning","ui"],timeoutMs:2e4,fn:async e=>{const a=t(u),d=t(p),h=t(w),b=t(o),m=window.fetch?.bind(window);try{J.set("high"),Y.set("low"),j.set("auto"),u.set([{id:"test-conv-2",title:"Reasoning SSE Realistic",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"User question here"},{role:"assistant",content:"Assistant prior reply"}]}]),p.set(0),w.set([]),o.set([]),await l(0),await c(()=>!!M(),4e3),await l(50);const T=_();e.that(T.length>=1,"At least one message element should render");const r=T[0],f=["Alpha ","Beta "],g=["Gamma ","Delta "],S=f.join(""),v=g.join(""),n=[{event:"response.reasoning_text.delta",data:{delta:f[0]}},{event:"response.reasoning_text.delta",data:{delta:f[1]}},{event:"response.reasoning_text.done",data:{text:S}},{event:"response.reasoning_text.delta",data:{delta:g[0]}},{event:"response.reasoning_text.delta",data:{delta:g[1]}},{event:"response.reasoning_text.done",data:{text:v}},{event:"response.completed",data:{}}];window.fetch=(q,H)=>{const z=typeof q=="string"?q:q.url??String(q);return/\/v1\/responses$/.test(z)&&H?.method==="POST"?Promise.resolve(U(n)):m?m(q,H):Promise.reject(new Error("No fetch"))},await G("Explain the Monte Hall problem using logic. Think hard about the answer.","gpt-5-nano",void 0,void 0,{convId:"test-conv-2",anchorIndex:0}),await c(()=>R(r).length===1,4e3);const x=R(r)[0];await c(()=>E(x).length>=2,4e3),await c(()=>E(x).every(q=>B(q).includes("done")),4e3);const y=E(x),s=y.length;e.that(s===2,`Expected 2 panels, found ${s}`);const i=R(r);e.that(i.length===1,`Expected exactly one Reasoning window, found ${i.length}`);const P=$(y[0]),C=$(y[1]),I=S.trim(),k=v.trim();e.that(P===I,`Panel 1 final text should equal streamed content (${JSON.stringify(I)}), got ${JSON.stringify(P)}`),e.that(!D(P),"Panel 1 text is not an exact double of itself"),e.that(!P.includes(I+I),"Panel 1 text is not duplicated by concatenation"),e.that(C===k,`Panel 2 final text should equal streamed content (${JSON.stringify(k)}), got ${JSON.stringify(C)}`),e.that(!D(C),"Panel 2 text is not an exact double of itself"),e.that(!C.includes(k+k),"Panel 2 text is not duplicated by concatenation")}finally{o.set(b),w.set(h),u.set(a),p.set(d),await l(0),m&&(window.fetch=m)}}});A({id:"reasoning-live-no-duplicate-panels-per-sequence",name:"Reasoning SSE: ensures no duplicate panels are created for a single reasoning sequence",tags:["live","reasoning","ui"],timeoutMs:15e3,fn:async e=>{const a=t(u),d=t(p),h=t(w),b=t(o);try{u.set([{id:"test-conv-3",title:"No Duplicate Panels Test",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"Test question"}]}]),p.set(0),w.set([]),o.set([]),await l(0),await c(()=>!!M(),4e3);const T=_()[0],r=O("test-conv-3","gpt-5-nano",0),f=W("text","test-conv-3",r);F(f,"First chunk "),F(f,"First chunk Second chunk "),N(f),await l(100);const g=t(o).filter(s=>s.responseId===r);e.that(g.length===1,`Expected 1 panel after completion, got ${g.length}`);const S=t(o).length;N(f),await l(100);const v=t(o).length;e.that(v===S,`Panel count should not increase on duplicate completion (was ${S}, now ${v})`),await c(()=>R(T).length===1,2e3);const n=R(T)[0],x=E(n);e.that(x.length===1,`DOM should show 1 panel, but shows ${x.length}`);const y=$(x[0]);e.that(y==="First chunk Second chunk",`Panel text should be original, got: "${y}"`)}finally{o.set(b),w.set(h),u.set(a),p.set(d),await l(0)}}});A({id:"reasoning-live-monte-hall-no-duplicate-panels",name:"Reasoning SSE: Monte Hall problem generates correct number of panels without duplicates",tags:["live","reasoning","ui"],timeoutMs:2e4,fn:async e=>{const a=t(u),d=t(p),h=t(w),b=t(o),m=window.fetch?.bind(window);try{J.set("high"),Y.set("low"),j.set("auto"),u.set([{id:"test-conv-4",title:"Monte Hall Test",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"Explain the Monte Hall problem using logic. Think hard about the answer."}]}]),p.set(0),w.set([]),o.set([]),await l(0),await c(()=>!!M(),4e3);const r=_()[0],f=[{event:"response.reasoning_text.delta",data:{delta:"Reasoning 1 start "}},{event:"response.reasoning_text.delta",data:{delta:"Reasoning 1 middle "}},{event:"response.reasoning_text.delta",data:{delta:"Reasoning 2 start "}},{event:"response.reasoning_text.delta",data:{delta:"Reasoning 2 end "}},{event:"response.reasoning_text.delta",data:{delta:"Reasoning 3 content "}},{event:"response.reasoning_text.done",data:{text:"Reasoning 1 start Reasoning 1 middle Reasoning 2 start Reasoning 2 end Reasoning 3 content "}},{event:"response.completed",data:{}}];window.fetch=(s,i)=>{const P=typeof s=="string"?s:s.url??String(s);return/\/v1\/responses$/.test(P)&&i?.method==="POST"?Promise.resolve(U(f)):m?m(s,i):Promise.reject(new Error("No fetch"))},await G("Explain the Monte Hall problem using logic. Think hard about the answer.","gpt-5-nano",void 0,void 0,{convId:"test-conv-4",anchorIndex:0}),await c(()=>R(r).length===1,4e3);const g=R(r)[0];await c(()=>E(g).length>0,4e3),await c(()=>E(g).every(s=>B(s).includes("done")),5e3);const S=E(g),v=S.length;e.that(v===1,`Expected exactly 1 panel for single reasoning stream, got ${v}`);const n=S.map(s=>$(s));e.that(n[0].includes("Reasoning 1"),`Panel should contain "Reasoning 1", got: "${n[0]}"`),e.that(n[0].includes("Reasoning 2"),`Panel should contain "Reasoning 2", got: "${n[0]}"`),e.that(n[0].includes("Reasoning 3"),`Panel should contain "Reasoning 3", got: "${n[0]}"`);for(let s=0;s<n.length;s++)e.that(!D(n[s]),`Panel ${s+1} should not have duplicated text`);const y=t(o).filter(s=>s.convId==="test-conv-4");e.that(y.length===1,`Store should have exactly 1 panel for this conversation, has ${y.length}`)}finally{o.set(b),w.set(h),u.set(a),p.set(d),await l(0),m&&(window.fetch=m)}}});A({id:"reasoning-live-panel-text-integrity",name:"Reasoning SSE: panel text matches streamed content without duplication",tags:["live","reasoning","ui"],timeoutMs:15e3,fn:async e=>{const a=t(u),d=t(p),h=t(w),b=t(o);try{u.set([{id:"test-conv-5",title:"Text Integrity Test",assistantRole:"You are a helpful assistant.",conversationTokens:0,history:[{role:"user",content:"Test"}]}]),p.set(0),w.set([]),o.set([]),await l(0),await c(()=>!!M(),4e3);const T=_()[0],r=O("test-conv-5","gpt-5-nano",0),f=["Alpha","Beta","Gamma"],g=W("text","test-conv-5",r);let S="";for(const P of f)S+=P,F(g,S),await l(50);N(g),await l(100),await c(()=>R(T).length===1,2e3);const v=R(T)[0],n=E(v);e.that(n.length===1,`Should have exactly 1 panel in DOM, got ${n.length}`);const x=$(n[0]),y="AlphaBetaGamma";e.that(x===y,`Final text should be "${y}", got "${x}"`);const i=t(o).filter(P=>P.responseId===r);e.that(i.length===1,`Should have 1 panel in store for this window, got ${i.length}`)}finally{o.set(b),w.set(h),u.set(a),p.set(d),await l(0)}}});
