import{r as u,b as h,c as y,d as C,l as k,o as B,g as x}from"./index-401504da.js";function i(t){return new Promise(e=>setTimeout(e,t))}async function s(t,e=4e3,a=25){const r=performance.now();for(;!t();){if(performance.now()-r>e)throw new Error("waitFor: timeout");await i(a)}}function n(){const t=document.querySelector(".main-content-area");return t?t.querySelector(".overflow-y-auto"):null}function o(){const t=n();return t?Array.from(t.querySelectorAll(".message")):[]}function R(t){return Array.from(t.querySelectorAll("details"))}function $(t,e,a=10){return Math.abs(t-e)<=a}function l(){return"Don't provide compliments or enthusiastic compliments at the start of your responses. Don't provide offers for follow up at the end of your responses."}async function f(t,e){const a=t.map((r,c)=>({...r,id:r.id||`test-conv-${c}-${Date.now()}-${Math.random().toString(36).slice(2,9)}`}));y.set(a),h.set(e),await i(0),await s(()=>!!n(),3e3),await i(50)}async function p(){k.set([]),B.set([]),await i(0)}function d(t,e,a){const c=x(y)[t];if(!c||!c.id)return console.error(`No conversation found at index ${t} or missing ID`),null;const w=c.id,g=a?.id??`win-${w}-${e}-${Math.random().toString(36).slice(2,8)}`,S=a?.model??"gpt-5",W=a?.summaryText??"Reasoning summary text",A=a?.done??!0;return k.update(m=>[...m,{id:g,convId:w,anchorIndex:e,open:!0,model:S}]),B.update(m=>[...m,{id:`panel-${g}`,responseId:g,convId:w,kind:"summary",text:W,done:A}]),g}u({id:"rw-appear-only-with-data",name:"RW appear only with reasoning data and bind to the correct chat session",tags:["non-api","reasoning","ui"],async fn(t){await p(),await f([{history:[{role:"user",content:"Hi there"},{role:"assistant",content:"Hello!"}],conversationTokens:0,assistantRole:l(),title:"Chat A"}],0);const e=n();t.that(e!=null,"Chat container exists");let a=e.querySelectorAll("details").length;t.that(a===0,"No Reasoning windows before reasoning data arrives"),d(0,0,{id:"w-a-0"}),await s(()=>e.querySelectorAll("details").length===1),a=e.querySelectorAll("details").length,t.that(a===1,"One Reasoning window appears after reasoning data is added");const r=o();t.that(r.length>=2,"At least user+assistant messages are rendered");const c=R(r[0]).length,w=R(r[1]).length;t.that(c===1,"RW is attached under the user message (anchorIndex 0)"),t.that(w===0,"RW is not attached to the assistant message")}});u({id:"rw-per-conversation-separation",name:"RW per-conversation separation and switching between chats",tags:["non-api","reasoning","ui","switching"],async fn(t){await p(),await f([{history:[{role:"user",content:"A: user 1"},{role:"assistant",content:"A: assistant 1"}],conversationTokens:0,assistantRole:l(),title:"Chat A"},{history:[{role:"user",content:"B: user 1"},{role:"assistant",content:"B: assistant 1"}],conversationTokens:0,assistantRole:l(),title:"Chat B"}],0),d(0,0,{id:"w-a-0"}),await s(()=>n().querySelectorAll("details").length===1);let e=o();t.that(R(e[0]).length===1,"Chat A shows its RW"),h.set(1),await i(50),await s(()=>o().length>=2);let a=n();t.that(a.querySelectorAll("details").length===0,"Chat B initially shows no RW"),d(1,0,{id:"w-b-0"}),await s(()=>n().querySelectorAll("details").length===1),e=o(),t.that(R(e[0]).length===1,"Chat B shows its own RW"),h.set(0),await i(50),await s(()=>o().length>=2),a=n(),t.that(a.querySelectorAll("details").length===1,"Chat A still shows exactly one RW after switching back"),e=o(),t.that(R(e[0]).length===1,"RW remains attached under the correct user message in Chat A")}});u({id:"rw-stable-placement",name:"RW placement is stable between a user message and assistant response",tags:["non-api","reasoning","ui","placement"],async fn(t){await p(),await f([{history:[{role:"user",content:"Anchor me"},{role:"assistant",content:"Initial reply"}],conversationTokens:0,assistantRole:l(),title:"Placement Chat"}],0),d(0,0,{id:"w-place-0"}),await s(()=>n().querySelectorAll("details").length===1);const e=n(),c=o()[0].querySelector("details");t.that(!!c,"RW details exists before adding more content");const w=e.getBoundingClientRect(),g=c.getBoundingClientRect().top-w.top+e.scrollTop;y.update(b=>{const v=[...b];return v[0]={...v[0],history:[...v[0].history,{role:"assistant",content:Array.from({length:30},(M,T)=>`Extra line ${T+1}`).join(`
`)}]},v}),await i(50);const A=o()[0].querySelector("details");t.that(!!A,"RW details still exists after adding more content");const m=e.getBoundingClientRect(),q=A.getBoundingClientRect().top-m.top+e.scrollTop;t.that($(q,g,10),`RW position stable (before=${g.toFixed(1)}, after=${q.toFixed(1)})`)}});u({id:"rw-non-reasoning-switching",name:"Non-reasoning chat sessions do not show RW; switching back preserves RW for reasoning sessions",tags:["non-api","reasoning","ui","switching"],async fn(t){await p(),await f([{history:[{role:"user",content:"R: user 1"},{role:"assistant",content:"R: assistant 1"}],conversationTokens:0,assistantRole:l(),title:"Chat R (reasoning)"},{history:[{role:"user",content:"N: user 1"},{role:"assistant",content:"N: assistant 1"}],conversationTokens:0,assistantRole:l(),title:"Chat N (non-reasoning)"}],0),C.set("gpt-5"),d(0,0,{id:"w-r-0"}),await s(()=>n().querySelectorAll("details").length===1);let e=n();t.that(e.querySelectorAll("details").length===1,"Chat R shows one RW"),h.set(1),C.set("gpt-4.1"),await i(50),await s(()=>o().length>=2),e=n(),t.that(e.querySelectorAll("details").length===0,"Chat N shows no RW"),h.set(0),C.set("gpt-5"),await i(50),await s(()=>o().length>=2),e=n(),t.that(e.querySelectorAll("details").length===1,"Chat R still shows its RW after switching back"),h.set(1),await i(50),await s(()=>o().length>=2),e=n(),t.that(e.querySelectorAll("details").length===0,"Chat N continues to show no RW")}});u({id:"rw-no-leak-on-new-chat-append",name:"New Chat (append) does not inherit RW from previous chat",tags:["non-api","reasoning","ui","new-chat"],async fn(t){await p(),await f([{history:[{role:"user",content:"A: hi"},{role:"assistant",content:"A: hello"}],conversationTokens:0,assistantRole:l(),title:"Chat A"}],0),d(0,0,{id:"rw-a-0"}),await s(()=>n().querySelectorAll("details").length===1),y.update(r=>[...r,{id:`test-conv-b-${Date.now()}-${Math.random().toString(36).slice(2,9)}`,history:[{role:"user",content:"B: new chat start"}],conversationTokens:0,assistantRole:l(),title:"Chat B"}]),h.set(1),await i(50),await s(()=>!!n(),2e3),await s(()=>o().length>=1,2e3);const e=n();t.that(e.querySelectorAll("details").length===0,"Newly appended chat should show no RW"),h.set(0),await i(50),await s(()=>o().length>=2,2e3);const a=n();t.that(a.querySelectorAll("details").length===1,"Original chat still shows its RW after switching back")}});u({id:"rw-no-leak-on-new-chat-reset",name:"Replacing conversation list (fresh new chat) does not inherit RW",tags:["non-api","reasoning","ui","new-chat"],async fn(t){await p(),await f([{history:[{role:"user",content:"A: hi"},{role:"assistant",content:"A: hello"}],conversationTokens:0,assistantRole:l(),title:"Chat A"}],0),d(0,0,{id:"rw-a-0"}),await s(()=>n().querySelectorAll("details").length===1),y.set([{id:`test-conv-fresh-${Date.now()}-${Math.random().toString(36).slice(2,9)}`,history:[{role:"user",content:"Fresh new chat"}],conversationTokens:0,assistantRole:l(),title:"New Chat"}]),h.set(0),await i(50),await s(()=>!!n(),2e3),await s(()=>o().length>=1,2e3);const e=n();t.that(e.querySelectorAll("details").length===0,"Fresh new chat should show no RW")}});u({id:"rw-no-leak-on-delete-reindex",name:"Deleting a conversation does not leak its RW into the next conversation (index reuse)",tags:["non-api","reasoning","ui","delete","reindex"],async fn(t){await p(),await f([{history:[{role:"user",content:"A: user 1"},{role:"assistant",content:"A: assistant 1"}],conversationTokens:0,assistantRole:l(),title:"Chat A"},{history:[{role:"user",content:"B: user 1"},{role:"assistant",content:"B: assistant 1"}],conversationTokens:0,assistantRole:l(),title:"Chat B"}],0),d(0,0,{id:"rw-a-0"}),await s(()=>n().querySelectorAll("details").length===1),y.update(a=>[a[1]]),h.set(0),await i(50),await s(()=>!!n(),2e3),await s(()=>o().length>=1,2e3);const e=n();t.that(e.querySelectorAll("details").length===0,"After deleting Chat A, its RW must not appear in Chat B")}});
